package com.github.jond3k.jonstructs.helpers

import scala.collection.JavaConversions.enumerationAsScalaIterator
import java.util.logging.{Level, LogManager, Logger}
import com.github.jond3k.jonstructs.Logging

/**
 * Originally created to reduce the noise generated by Jersey in integration tests.
 */
trait JVMLoggingHelper extends Logging {

  /**
   * Drop the JVM logging to this amount
   *
   * @param prefix Affect all loggers with this prefix
   * @param lvl    The minimum level to report
   */
  def dropJVMLogging(prefix: String = "", lvl: Level = Level.WARNING) {
    setJVMLogging(prefix, lvl, _ < _)
  }

  protected def setJVMLoggingSingle(logger: Logger, lvl: Level, cmp: (Int, Int) => Boolean) {
    Option(logger) match {
      case Some(l) if (l.getLevel == null || cmp(l.getLevel.intValue(), lvl.intValue())) =>
        logger.setLevel(lvl)
        log.info("Set jvm logger {} to level {}", logger.getName, lvl)
      case _ =>
    }
  }

  /**
   * Set the JVM logging level to this value
   *
   * @param prefix Affect all loggers with this prefix
   * @param lvl    The minimum level to report
   * @param cmp    The comparison operator. By default it will replace everything
   */
  def setJVMLogging(prefix: String = "", lvl: Level, cmp: (Int, Int) => Boolean = _ != _) {
    assert(lvl != null)
    LogManager.getLogManager.getLoggerNames.foreach(name => {
      if (name.startsWith(prefix)) {
        setJVMLoggingSingle(LogManager.getLogManager.getLogger(name), lvl, cmp)
      }
    })
  }

}
